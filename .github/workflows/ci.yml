name: CI checks
on:
  push:
    branches:
      - "feature/*"
  pull_request:
    branches:
      - "dev"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install

      - name: Fetch all branches
        run: git fetch --all

      - name: Determine changed files
        id: changed-files
        run: |
          echo "Event Name: ${{ github.event_name }}"

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "This is a pull request event."
            BASE_BRANCH="${{ github.event.pull_request.base.sha }}"
            HEAD_BRANCH="${{ github.event.pull_request.head.sha }}"
            CHANGED_FILES=$(git diff --name-only "$BASE_BRANCH" "$HEAD_BRANCH" | grep -E '\.jsx?$')
            
            # Trim "urban-eats-server/" prefix from file paths if any files are found
            if [ -n "$CHANGED_FILES" ]; then
              CHANGED_FILES=$(echo "$CHANGED_FILES" | sed 's|^urban-eats-server/||')
              # Convert newline-separated list of files to space-separated list
              CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')
            fi

            # Output the changed files list to the GitHub environment
            echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          else
            echo "This is a push event or other event type."
            # For push events, or other types of events, do not fail the job
            echo "No changes to process for push events."
            echo "CHANGED_FILES=" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Run lint on changed files
        run: |
          pwd
          if [ -n "$CHANGED_FILES" ]; then
            echo "$CHANGED_FILES" | tr ' ' '\n' > changed_files.txt
            echo "Linting the following files:"
            cat changed_files.txt
            # Initialize exit code
            LINT_EXIT_CODE=0
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                echo "Linting $file"
                ./node_modules/.bin/eslint "$file" --report-unused-disable-directives --max-warnings 0 || LINT_EXIT_CODE=$?
              else
                echo "$file does not exist"
              fi
            done < changed_files.txt
            # Exit with the combined exit code
            exit $LINT_EXIT_CODE
          else
            echo "No JavaScript/JSX files were changed."
          fi
        env:
          CHANGED_FILES: ${{ env.CHANGED_FILES }}

  unit_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Unit Tests
        run: |
          npm install
          npm test

  merge_to_dev:
    runs-on: ubuntu-latest
    needs: [lint, unit_test]
    if: ${{ needs.lint.result == 'success' && needs.unit_test.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Git credentials
        run: |
          git config --global user.email hazrat17016@gmail.com
          git config --global user.name "Hazrat16"

      - name: Get branch name
        id: get_branch
        run: |
          echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV

      - name: Checkout dev branch
        run: |
          git fetch origin dev
          git checkout dev
          git pull origin dev

      - name: Fetch feature branch
        run: |
          git fetch origin ${{ env.BRANCH_NAME }}
          git checkout ${{ env.BRANCH_NAME }}

      - name: Attempt to Merge Feature Branch into Dev
        run: |
          git checkout dev
          git merge --no-ff ${{ env.BRANCH_NAME }} || {
            echo "Merge failed. Details:";
            git status;
            git diff;
            exit 1;
          }

      - name: Push changes to dev
        if: success()
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}
          git push origin dev
